{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"c:\\\\reactnativeapps\\\\AI\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport Component from 'react';\nimport { DrawerLayoutAndroidComponent } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nvar blocks = [];\nvar moveValues = [];\nvar map = [];\nvar xSize = 5;\nvar ySize = 5;\nvar mapSize = xSize * ySize;\nvar dir = [];\nvar loc = 0;\n\nvar app = function (_React$Component) {\n  _inherits(app, _React$Component);\n\n  var _super = _createSuper(app);\n\n  function app(props) {\n    var _this;\n\n    _classCallCheck(this, app);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      movecount: 1\n    };\n    _this.handleUpdate = _this.handleUpdate.bind(_assertThisInitialized(_this));\n    Mapinit();\n    return _this;\n  }\n\n  _createClass(app, [{\n    key: \"handleUpdate\",\n    value: function handleUpdate() {\n      var pressed = true;\n\n      do {\n        map[loc] = {\n          numv: loc + 1,\n          func: 'worm'\n        };\n        bestmove(loc);\n        var toend = DistanceToEnd(loc);\n        var movedir = Math.max.apply(null, moveValues);\n        var dirIndex = moveValues.indexOf(movedir);\n        console.log(moveValues);\n        console.log(toend);\n        console.log(movedir);\n        console.log(dirIndex);\n\n        switch (dirIndex) {\n          case 0:\n            loc = loc - 5;\n            break;\n\n          case 1:\n            loc = loc + 5;\n            break;\n\n          case 2:\n            loc = loc - 1;\n            break;\n\n          case 3:\n            loc = loc + 1;\n            break;\n        }\n\n        pressed = false;\n        this.setState({\n          movecount: this.state.movecount + 1\n        });\n      } while (pressed == true);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 5\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }\n      }, this.state.movecount), React.createElement(Button, {\n        title: \"start\",\n        onPress: this.handleUpdate,\n        style: styles.startbutton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }\n      }), React.createElement(FlatList, {\n        data: map,\n        extraData: this.state,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(View, {\n            style: drawmap(item),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 33\n            }\n          }, React.createElement(Text, {\n            style: styles.GridViewInsideTextItemStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 11\n            }\n          }, item.numv));\n        },\n        numColumns: 5,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return app;\n}(React.Component);\n\nexport { app as default };\n\nfunction DistanceToEnd(loc) {\n  var distance;\n\n  switch (loc) {\n    case loc < 0:\n      distance = 0;\n      break;\n\n    case loc < 5:\n      distance = 4 - loc + 4;\n      break;\n\n    case loc < 10:\n      distance = 9 - loc + 3;\n      break;\n\n    case loc < 15:\n      distance = 14 - loc + 2;\n      break;\n\n    case loc < 20:\n      distance = 19 - loc + 1;\n      break;\n\n    case loc < 25:\n      distance = 24 - loc;\n      break;\n  }\n\n  return distance;\n}\n\nfunction bestmove(loc) {\n  moves(loc);\n  moveValues.splice(0, 4);\n  var up = DistanceToEnd(dir[0]);\n  var down = DistanceToEnd(dir[1]);\n  var left = DistanceToEnd(dir[2]);\n  var right = DistanceToEnd(dir[3]);\n\n  switch (loc) {\n    case (4, 9, 14, 19, 24):\n      right = 0;\n      break;\n\n    case (0, 5, 10, 15, 20):\n      left = 0;\n      break;\n\n    case (0, 1, 2, 3, 4):\n      up = 0;\n      break;\n\n    case (20, 21, 22, 23, 24):\n      down = 0;\n      break;\n\n    default:\n      break;\n  }\n\n  moveValues.push(up, down, left, right);\n}\n\nfunction direction(index) {\n  var basicdir = ['up', 'down', 'left', 'right'];\n  return basicdir[index];\n}\n\nfunction moves(loc) {\n  dir.splice(0, 4);\n  var down = loc + ySize;\n  var up = loc - ySize;\n  var left = loc - 1;\n  var right = loc + 1;\n  dir.push(up, down, left, right);\n  console.log(dir);\n}\n\nfunction Mapinit() {\n  var blockobjectcount = 5;\n\n  for (var index = 0; index < blockobjectcount; index++) {\n    var randomnum = Math.floor(Math.random() * mapSize) + 1;\n\n    if (randomnum == 1) {\n      randomnum = randomnum + 1;\n    } else if (randomnum == mapSize) {\n      randomnum = randomnum - 1;\n    }\n\n    blocks.push(randomnum);\n  }\n\n  for (var _index = 0; _index < mapSize; _index++) {\n    var blocknum = _index + 1;\n\n    if (blocks.includes(blocknum)) {\n      map.push({\n        numv: _index + 1,\n        func: 'block'\n      });\n    } else {\n      map.push({\n        numv: _index + 1,\n        func: 'free'\n      });\n    }\n  }\n}\n\nfunction drawmap(item) {\n  var blockstyle;\n\n  if (item.func == 'block') {\n    blockstyle = styles.mapblock;\n  } else if (item.func == 'worm') {\n    blockstyle = styles.mapworm;\n  } else {\n    blockstyle = styles.mapfree;\n  }\n\n  return blockstyle;\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  mapfree: {\n    justifyContent: 'center',\n    flex: 1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'white'\n  },\n  mapblock: {\n    justifyContent: 'center',\n    flex: 1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'red'\n  },\n  mapworm: {\n    justifyContent: 'center',\n    flex: 1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'blue'\n  },\n  startbutton: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 50,\n    width: 100,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'blue'\n  },\n  GridViewInsideTextItemStyle: {\n    color: '#fff',\n    fontSize: 18,\n    color: \"black\",\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["c:/reactnativeapps/AI/App.js"],"names":["StatusBar","React","useState","useEffect","Component","DrawerLayoutAndroidComponent","blocks","moveValues","map","xSize","ySize","mapSize","dir","loc","app","props","state","movecount","handleUpdate","bind","Mapinit","pressed","numv","func","bestmove","toend","DistanceToEnd","movedir","Math","max","apply","dirIndex","indexOf","console","log","setState","styles","container","startbutton","item","drawmap","GridViewInsideTextItemStyle","distance","moves","splice","up","down","left","right","push","direction","index","basicdir","blockobjectcount","randomnum","floor","random","blocknum","includes","blockstyle","mapblock","mapworm","mapfree","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","height","width","borderWidth","borderColor","color","fontSize"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\n\nimport React ,{ useState, useEffect }from 'react';\n\nimport Component from 'react';\n\nimport { DrawerLayoutAndroidComponent, StyleSheet, Text, View, FlatList, Button } from 'react-native';\n\n  const blocks=[];\n  const moveValues=[];\n  const map=[];\n\n  var xSize = 5;\n  var ySize = 5;\n  var mapSize = xSize*ySize;\n  const dir = [];\n  var loc = 0;\n  \n\n  export default class app extends React.Component{\n\n    constructor(props) {\n      super(props);\n      this.state={movecount:1};\n      this.handleUpdate = this.handleUpdate.bind(this);\n      Mapinit();    \n    }\n\n    handleUpdate() {\n      var pressed = true;\n      do{\n\n        map[loc] = {numv:loc + 1, func:'worm'};\n        \n        bestmove(loc)\n        var toend = DistanceToEnd(loc);\n        var movedir = Math.max.apply(null, moveValues);\n        var dirIndex = moveValues.indexOf(movedir);\n\n        console.log(moveValues);\n        console.log(toend);\n        console.log(movedir);\n        console.log(dirIndex);\n\n        switch (dirIndex) {\n          case 0:\n            loc = loc - 5;\n            break;\n          case 1:\n            loc = loc + 5;\n            break;\n          case 2:\n            loc = loc - 1;\n            break;\n          case 3:\n            loc = loc + 1;\n            break;\n        }\n\n        pressed = false;\n        this.setState({movecount: this.state.movecount + 1});\n    }while(pressed == true);\n  }\n    \n  render(){\n    return(\n    <View style={styles.container}>\n      <Text>{this.state.movecount}</Text>\n      <Button title=\"start\" onPress={this.handleUpdate} style={styles.startbutton}></Button>\n      <FlatList\n        data={map}\n        extraData={this.state}\n        renderItem={({item}) => <View style={drawmap(item)}>\n          <Text style={styles.GridViewInsideTextItemStyle}>{item.numv}</Text>            \n        </View>}\n        numColumns={5}\n      />\n    </View>\n    );\n  }\n \n}\n\nfunction DistanceToEnd(loc){\n  var distance;\n\n  switch (loc) {\n    case loc<0:\n      distance = 0; \n      break;\n    case loc<5:   \n      distance = 4 - loc + 4\n      break;\n    case loc<10:\n      distance = 9 - loc + 3\n      break;\n    case loc<15:\n      distance = 14 - loc + 2\n      break;\n    case loc<20:\n      distance = 19 - loc  + 1\n      break;\n    case loc<25:\n      distance = 24 - loc\n      break; \n  }\n\n  return(\n    distance\n  )\n}\n\nfunction bestmove(loc){\n  moves(loc)\n  moveValues.splice(0,4);\n  \n  var up = DistanceToEnd(dir[0]);\n  var down = DistanceToEnd(dir[1]);\n  var left = DistanceToEnd(dir[2]);\n  var right = DistanceToEnd(dir[3]);\n\n  switch (loc) {\n    case 4,9,14,19,24:\n      right = 0;\n      break;\n    case 0,5,10,15,20:\n      left = 0;\n      break;\n    case 0,1,2,3,4:\n      up = 0;\n      break;\n    case 20,21,22,23,24:\n      down = 0;\n      break;\n  \n    default:\n      break;\n  }\n  \n  moveValues.push(up,down,left,right);\n\n\n}\n\nfunction direction(index){\n  const basicdir = ['up','down','left','right'];\n  return(\n    basicdir[index]\n  )\n}\n\nfunction moves(loc){\n\n  dir.splice(0,4);\n  var down = loc + ySize;\n  var up = loc - ySize;\n  var left = loc - 1;\n  var right = loc + 1;\n  dir.push(up,down,left,right);\n  console.log(dir);\n}\n\nfunction Mapinit(){\n\n  var blockobjectcount = 5;\n\n  for (let index = 0; index < blockobjectcount; index++) {\n    var randomnum = Math.floor(Math.random() * mapSize) + 1\n    if (randomnum == 1){\n      randomnum = randomnum + 1;\n    }\n    else if (randomnum == mapSize){\n      randomnum = randomnum - 1;\n    }\n    blocks.push(randomnum);   \n  }\n  \n  for (let index = 0; index < mapSize; index++) {\n    var blocknum = index+1;\n    if(blocks.includes(blocknum)){\n      map.push({numv:index+1, func:'block'});\n    }\n    else{\n      map.push({numv:index+1, func:'free'});\n    }\n  }\n}\n\n\nfunction drawmap(item){\n   var blockstyle;\n   \n  if (item.func == 'block'){\n    blockstyle = styles.mapblock;\n  }\n  else if (item.func == 'worm'){\n    blockstyle = styles.mapworm;\n  }\n  else{\n    blockstyle = styles.mapfree;\n  }\n  return(blockstyle);\n}\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  mapfree: {\n    justifyContent: 'center',\n    flex:1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'white'\n  },\n\n  mapblock: {\n    justifyContent: 'center',\n    flex:1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'red'\n  },\n\n  mapworm: {\n    justifyContent: 'center',\n    flex:1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'blue'\n  },\n\n  startbutton: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 50,\n    width: 100,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'blue'\n  },\n \n  GridViewInsideTextItemStyle: {\n \n   color: '#fff',\n   fontSize: 18,\n   color: \"black\",\n   justifyContent: 'center',\n   \n },\n});\n"]},"metadata":{},"sourceType":"module"}