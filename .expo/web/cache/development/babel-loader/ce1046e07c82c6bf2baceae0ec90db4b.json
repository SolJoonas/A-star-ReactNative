{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\reactnativeapps\\\\AI\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport Component from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport styles from \"./styles/Gridstyles\";\nvar map = [];\nvar OpenSet = [];\nvar ClosedSet = [];\nvar xSize = 5;\nvar ySize = 5;\nvar mapSize = xSize * ySize;\nvar startStop = [];\nvar start = 0;\nvar end = 0;\nvar startID = 0;\nvar endID = 0;\nvar last;\nvar UltimateCurrent = [];\nvar goal = false;\nvar testi;\n\nvar app = function (_React$Component) {\n  _inherits(app, _React$Component);\n\n  var _super = _createSuper(app);\n\n  function app(props) {\n    var _this;\n\n    _classCallCheck(this, app);\n\n    _this = _super.call(this, props);\n\n    _this.handleUpdate = function () {\n      UltimateCurrent.push(map[startID]);\n\n      if (goal == true) {\n        map.splice(0, map.length);\n        startStop.splice(0, startStop.length);\n        Mapinit();\n        UltimateCurrent.push(map[startID]);\n\n        _this.setState({\n          clickcount: _this.state.clickcount - _this.state.clickcount\n        });\n      }\n\n      aStar(map[startID]);\n      trail();\n      console.log(map);\n\n      _this.setState({\n        clickcount: _this.state.clickcount + 1\n      });\n    };\n\n    _this.navigate = function (id) {\n      if (startStop.length < 2) {\n        startStop.push(map[id]);\n        console.log(startStop);\n      } else {\n        console.log('On jo kaksi');\n      }\n\n      if (startStop.length > 1) {\n        end = startStop[1].Location;\n        endID = startStop[1].ID;\n      } else {\n        start = startStop[0].Location;\n        startID = startStop[0].ID;\n      }\n\n      _this.setState({\n        clickcount: _this.state.clickcount + 1\n      });\n    };\n\n    _this.state = {\n      clickcount: 0\n    };\n    _this.handleUpdate = _this.handleUpdate.bind(_assertThisInitialized(_this));\n    _this.navigate = _this.navigate.bind(_assertThisInitialized(_this));\n    Mapinit();\n    return _this;\n  }\n\n  _createClass(app, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 5\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }\n      }, \"Etsin parhaan reitin sinulle\"), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }\n      }, \"Kun olet valinnut Aloitus ja lopetus pisteen klikkaamalla ruutuja paina navigate\"), React.createElement(Button, {\n        title: \"Navigate\",\n        onPress: this.handleUpdate,\n        style: styles.startbutton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 7\n        }\n      }), React.createElement(FlatList, {\n        data: map,\n        extraData: this.state.clickcount,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(View, {\n            style: drawmap(item),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 33\n            }\n          }, React.createElement(TouchableOpacity, {\n            style: styles.button,\n            onPress: function onPress() {\n              _this2.navigate(item.ID);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 11\n            }\n          }, React.createElement(Text, {\n            style: styles.GridViewInsideTextItemStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 13\n            }\n          }, item.ID)));\n        },\n        numColumns: xSize,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        style: styles.startText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }\n      }, \"T\\xE4m\\xE4 on aloitus pisteen v\\xE4ri\"), React.createElement(Text, {\n        style: styles.endText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 7\n        }\n      }, \"T\\xE4m\\xE4 on lopetus pisteen v\\xE4ri\"));\n    }\n  }]);\n\n  return app;\n}(React.Component);\n\nexport { app as default };\n\nfunction aStar(current) {\n  var CurrentID = current.ID;\n  OpenSet.push(CurrentID);\n\n  do {\n    var minscore = mapSize;\n\n    for (var index = 0; index < OpenSet.length; index++) {\n      map[OpenSet[index]].score = Distance(map[OpenSet[index]].Location);\n\n      if (map[OpenSet[index]].score < minscore) {\n        minscore = map[OpenSet[index]].fscore;\n      }\n    }\n\n    for (var _index = 0; _index < OpenSet.length; _index++) {\n      if (map[OpenSet[_index]].score > minscore) {\n        ClosedSet.push(OpenSet[_index]);\n        removeFromOpenList(OpenSet[_index]);\n      }\n    }\n\n    var possibilities = OpenSet.length;\n\n    for (var _index2 = 0; _index2 < possibilities; _index2++) {\n      CurrentID = OpenSet[_index2];\n      map[CurrentID].Neighbours = Neighbours(map[CurrentID].x, map[CurrentID].y, map[CurrentID].ID);\n\n      for (var _index3 = 0; _index3 < map[CurrentID].Neighbours.length; _index3++) {\n        var NeighbourID = map[CurrentID].Neighbours[_index3].ID;\n\n        if (InOpenSet(NeighbourID) == false && InClosedSet(NeighbourID) == false) {\n          map[NeighbourID].score = Distance(map[NeighbourID].Location);\n          map[NeighbourID].cameFrom = CurrentID;\n          OpenSet.push(NeighbourID);\n        }\n      }\n    }\n\n    ClosedSet.push(CurrentID);\n    removeFromOpenList(CurrentID);\n  } while (CurrentID != endID);\n}\n\nfunction removeFromOpenList(removeID) {\n  for (var index = 0; index < OpenSet.length; index++) {\n    if (OpenSet[index] == removeID) {\n      OpenSet.splice(index, 1);\n    }\n  }\n}\n\nfunction InClosedSet(id) {\n  var is = false;\n\n  for (var index = 0; index < ClosedSet.length; index++) {\n    if (id == ClosedSet[index]) {\n      is = true;\n    }\n  }\n\n  return is;\n}\n\nfunction InOpenSet(id) {\n  var is = false;\n\n  for (var index = 0; index < OpenSet.length; index++) {\n    if (id == OpenSet[index]) {\n      is = true;\n    }\n  }\n\n  return is;\n}\n\nfunction trail() {\n  var endPoint = map[endID];\n  var past = true;\n  var trailPath;\n  var last = endPoint;\n  map[startID].trail = true;\n\n  do {\n    trailPath = map[last.ID];\n    map[trailPath.ID].trail = true;\n    last = map[trailPath.cameFrom];\n\n    if (trailPath.ID == startID) {\n      past = false;\n    }\n  } while (past != false);\n}\n\nfunction cell(nx, ny, random, idnum) {\n  var ID = idnum;\n  var cameFrom = 0;\n  var x = nx;\n  var y = ny;\n  var loc = [x, y];\n  var score = 0;\n  var wall = wallorNot(random, loc);\n  var blocks = [];\n  var trail = false;\n  return {\n    'x': x,\n    'y': y,\n    'wall': wall,\n    'Neighbours': blocks,\n    'Location': loc,\n    'score': score,\n    'ID': ID,\n    'cameFrom': cameFrom,\n    'trail': trail\n  };\n}\n\nfunction Neighbours(x, y, id) {\n  var NL = [];\n\n  if (y > 0) {\n    if (map[id - xSize].wall != true) {\n      NL.push(map[id - xSize]);\n    }\n  }\n\n  if (y < ySize - 1) {\n    if (map[id + xSize].wall != true) {\n      NL.push(map[id + xSize]);\n    }\n  }\n\n  if (x > 0) {\n    if (map[id - 1].wall != true) {\n      NL.push(map[id - 1]);\n    }\n  }\n\n  if (x < xSize - 1) {\n    if (map[id + 1].wall != true) {\n      NL.push(map[id + 1]);\n    }\n  }\n\n  for (var _x = 0; _x < OpenSet.length; _x++) {\n    for (var _y = 0; _y < NL.length; _y++) {\n      if (OpenSet[_x].ID == NL[_y].ID) {\n        NL.splice(_y, 1);\n      }\n    }\n  }\n\n  return NL;\n}\n\nfunction wallorNot(random, loc) {\n  if (JSON.stringify(loc) == JSON.stringify(start) || JSON.stringify(loc) == JSON.stringify(end)) {\n    return false;\n  } else {\n    if (random > 0.8) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nfunction Mapinit() {\n  var num = 0;\n\n  for (var y = 0; y < ySize; y++) {\n    for (var x = 0; x < xSize; x++) {\n      var randomnum = Math.random();\n      map.push(cell(x, y, randomnum, num));\n      num++;\n    }\n  }\n}\n\nfunction drawmap(item) {\n  var blockstyle;\n\n  if (item.trail == true) {\n    blockstyle = styles.Trail;\n  }\n\n  if (!item.wall) {\n    if (item.ID == startID) {\n      blockstyle = styles.start;\n    } else if (item.ID == endID) {\n      blockstyle = styles.end;\n    } else if (item.trail == true) {\n      blockstyle = styles.Trail;\n    } else {\n      blockstyle = styles.mapfree;\n    }\n  } else {\n    blockstyle = styles.mapblock;\n  }\n\n  return blockstyle;\n}\n\nfunction Distance(location) {\n  return Math.abs(location[0] - end[0]) + Math.abs(location[1] - end[1]);\n}","map":{"version":3,"sources":["C:/reactnativeapps/AI/App.js"],"names":["StatusBar","React","useState","useEffect","Component","styles","map","OpenSet","ClosedSet","xSize","ySize","mapSize","startStop","start","end","startID","endID","last","UltimateCurrent","goal","testi","app","props","handleUpdate","push","splice","length","Mapinit","setState","clickcount","state","aStar","trail","console","log","navigate","id","Location","ID","bind","container","startbutton","item","drawmap","button","GridViewInsideTextItemStyle","startText","endText","current","CurrentID","minscore","index","score","Distance","fscore","removeFromOpenList","possibilities","Neighbours","x","y","NeighbourID","InOpenSet","InClosedSet","cameFrom","removeID","is","endPoint","past","trailPath","cell","nx","ny","random","idnum","loc","wall","wallorNot","blocks","NL","JSON","stringify","num","randomnum","Math","blockstyle","Trail","mapfree","mapblock","location","abs"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\n\nimport React ,{ useState, useEffect }from 'react';\n\nimport Component from 'react';\n\nimport {TouchableOpacity, Text, View, FlatList, Button } from 'react-native';\n\nimport styles from './styles/Gridstyles';\n\nconst map=[];\n\nvar OpenSet=[];\nvar ClosedSet=[];\n\nvar xSize = 5;\nvar ySize = 5;\nvar mapSize = xSize*ySize;\n\nvar startStop = [];\n\n// var start = [0,0];\n// var end = [xSize-1,ySize-1];\n\nvar start = 0;\nvar end = 0;\n\nvar startID = 0;\nvar endID = 0;\n\nvar last;\n\nvar UltimateCurrent = [];\n\nvar goal = false;\n\n\nvar testi;\n\nexport default class app extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state={clickcount:0};\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.navigate = this.navigate.bind(this);\n    \n    Mapinit(); \n  }\n\n  handleUpdate = () =>{\n    UltimateCurrent.push(map[startID]);\n    if (goal == true){\n      map.splice(0,map.length);\n      startStop.splice(0,startStop.length);\n      Mapinit();\n      UltimateCurrent.push(map[startID]);\n      this.setState({clickcount :this.state.clickcount - this.state.clickcount}) \n    }\n\n    aStar(map[startID]);\n    trail();\n    console.log(map);\n    this.setState({clickcount :this.state.clickcount + 1})    \n  }\n\n  navigate = (id) =>{\n    if(startStop.length < 2){\n      startStop.push(map[id]);\n      console.log(startStop);\n    }\n    else{\n      console.log('On jo kaksi');\n    }\n\n    if(startStop.length > 1){\n      end = startStop[1].Location;\n      endID = startStop[1].ID;\n    }\n    else{\n      start = startStop[0].Location;\n      startID = startStop[0].ID;\n    }\n\n    this.setState({clickcount :this.state.clickcount + 1})\n  }\n    \n  render(){\n    return(\n    <View style={styles.container}>\n      <Text>Etsin parhaan reitin sinulle</Text>\n      <Text>Kun olet valinnut Aloitus ja lopetus pisteen klikkaamalla ruutuja paina navigate</Text>\n      <Button title=\"Navigate\" onPress={this.handleUpdate} style={styles.startbutton}></Button>\n      <FlatList\n        data={map}\n        extraData={this.state.clickcount}\n        renderItem={({item}) => <View style={drawmap(item)}>\n          <TouchableOpacity style={styles.button} onPress={()=>{this.navigate(item.ID)}}>\n            <Text style={styles.GridViewInsideTextItemStyle}>{item.ID}</Text>\n          </TouchableOpacity>            \n        </View>}\n        numColumns={xSize}\n      />\n      <Text style={styles.startText}>Tämä on aloitus pisteen väri</Text>\n      <Text style={styles.endText}>Tämä on lopetus pisteen väri</Text>\n    </View>\n    );\n  } \n}\n\n//tutkii parhaan reitin aloituksesta lopetukseen. \n\nfunction aStar(current){\n  var CurrentID = current.ID;\n\n  OpenSet.push(CurrentID);\n  do{\n    var minscore = mapSize; // etäisyys ei voi olla suurempi kun kartan leveys x korkeus\n\n    for (let index = 0; index < OpenSet.length; index++) {\n      map[OpenSet[index]].score =  Distance(map[OpenSet[index]].Location)\n      if(map[OpenSet[index]].score < minscore){\n        minscore = map[OpenSet[index]].fscore; // mikä on pienin fscore opensetissä\n      }\n    }\n\n    for (let index = 0; index < OpenSet.length; index++) {\n      if(map[OpenSet[index]].score > minscore){ // poistetaan kaikki patsi ne joilla on pienin fscore\n        ClosedSet.push(OpenSet[index]);\n        removeFromOpenList(OpenSet[index]);\n      }\n    }\n\n    var possibilities = OpenSet.length;\n\n    for (let index = 0; index < possibilities; index++) {\n\n      CurrentID = OpenSet[index];\n      map[CurrentID].Neighbours = Neighbours(map[CurrentID].x, map[CurrentID].y, map[CurrentID].ID); // katsotaan naapurit ja  tallennetaan niiden ID listaan objektin sisään\n      \n      for (let index = 0; index < map[CurrentID].Neighbours.length; index++) {\n\n        var NeighbourID = map[CurrentID].Neighbours[index].ID;\n\n        //jos solu ei ole Opensetissä tai Closed setissä eli ei ole kurkittu sitä ennen voidaan se\n        //lisätä Opensettiin. \n        if(InOpenSet(NeighbourID) == false && InClosedSet(NeighbourID) == false){\n          map[NeighbourID].score =  Distance(map[NeighbourID].Location);\n          map[NeighbourID].cameFrom = CurrentID;         \n          OpenSet.push(NeighbourID);\n        }\n      }\n      \n    }\n    ClosedSet.push(CurrentID);\n    removeFromOpenList(CurrentID);\n  }while(CurrentID != endID)//(JSON.stringify(current.Location)!=JSON.stringify(end))\n}\n\nfunction removeFromOpenList(removeID){\n  for (let index = 0; index < OpenSet.length; index++) {\n    if(OpenSet[index] == removeID){\n      OpenSet.splice(index,1);\n    }\n  }\n}\n\n\n// tutkii onko solu Closedsetissä\nfunction InClosedSet(id){\n  var is = false;\n  for (let index = 0; index < ClosedSet.length; index++) {\n    if(id == ClosedSet[index]){\n      is  = true;\n    }\n  }\n  return is;\n}\n\n// tutkii onko solu Opensetissä\nfunction InOpenSet(id){\n  var is = false;\n  for (let index = 0; index < OpenSet.length; index++) {\n    if(id == OpenSet[index]){\n      is  = true;\n    }\n  }\n  return is;\n}\n\n// piirtää reitin. \nfunction trail(){\n\n  var endPoint = map[endID]; //solusta johon reitin haku loppui. Nyt oon koodannu sen vaan maaliksi koska koodi ei tunnista epäonnistumista.\n  var past = true;\n  var trailPath;\n  var last = endPoint; // tässä kohtaa määritän mistä solusta lähetään, tämä muuttuu kun reittiä mennään eteenpäin.\n\n  map[startID].trail = true; // värjää aloituksen reitiksi\n\n  do{\n\n    trailPath = map[last.ID];\n    map[trailPath.ID].trail = true;\n    last = map[trailPath.cameFrom];\n\n    if(trailPath.ID==startID){\n      past = false;\n    }\n\n  }while(past != false)\n}\n\nfunction cell(nx,ny,random,idnum){\n\n  // kartta muodostuu soluista joilla kaikilla omat alla olevat omat tiedot.\n\n  let ID = idnum;\n  let cameFrom = 0;\n  let x = nx;\n  let y = ny;\n  let loc = [x,y];\n  let score = 0;\n  let wall = wallorNot(random, loc);\n  var blocks = [];\n  var trail = false;\n\n  return {'x':x,'y':y,'wall':wall, 'Neighbours':blocks, 'Location':loc , 'score':score,'ID':ID, 'cameFrom':cameFrom,'trail':trail};\n}\n\n\n// tämä voisi olla parempi mutta toimii kuitenkin toistaiseksi.\n\nfunction Neighbours(x, y, id){\n\n  var NL = []; // tahän kootaan lista naapureista\n\n  // alla tutkitaan missä suunnassa on käytettävä naapuri joka voidaan lisätä listaan.\n\n  if(y > 0){ // voiko mennä ylös\n    \n    if (map[id-(xSize)].wall != true){\n      NL.push(map[id-(xSize)]);\n    }\n  }\n  if(y < ySize-1){ // voiko mennä alas\n    \n    if (map[id+(xSize)].wall != true){\n      NL.push(map[id+(xSize)]);\n    }\n  }\n  if(x > 0){ // voiko mennä vasemmalle\n    \n    if (map[id-1].wall != true){\n      NL.push(map[id-1]);\n    }\n  }\n  if(x < xSize-1){ // voiko mennä oikealle\n    \n    if (map[id+1].wall != true){\n      NL.push(map[id+1]);\n    }\n  }\n  \n  for (let x = 0; x < OpenSet.length; x++) {\n    for (let y = 0; y < NL.length; y++) {\n      if (OpenSet[x].ID == NL[y].ID){\n        NL.splice(y,1);\n      }\n      \n    }\n  }\n  \n  return NL;\n}\n\nfunction wallorNot(random,loc){\n  if(JSON.stringify(loc)==JSON.stringify(start) || JSON.stringify(loc) == JSON.stringify(end)){\n    return false;\n  }\n  else{\n    if(random>0.8){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n}\n\nfunction Mapinit(){\n  var num = 0;\n  for (let y = 0; y < ySize; y++) {\n    for (let x = 0; x < xSize; x++) {\n      var randomnum = Math.random();\n      map.push(cell(x,y,randomnum,num));\n      num++\n     }\n  }\n}\n\n//tällä määritellään kartan värit\nfunction drawmap(item){\n  var blockstyle;\n  if (item.trail == true){\n    blockstyle = styles.Trail;\n  }\n  if (!item.wall){\n    if (item.ID == startID){\n      blockstyle = styles.start;\n    }\n    else if (item.ID == endID){\n      blockstyle = styles.end;\n    }\n    else if (item.trail == true){\n      blockstyle = styles.Trail;\n    }\n    else{\n    blockstyle = styles.mapfree;\n    }\n  }\n  else{\n    blockstyle = styles.mapblock;\n  }\n  return(blockstyle);\n}\n// lasketaan matka tähän functioon lähetetystä solusta maaliin. \nfunction Distance(location){\n  return Math.abs(location[0]-end[0])+Math.abs(location[1]-end[1]); // toimii vain jos aloitus on vasemmassa yläkulmassa\n}"]},"metadata":{},"sourceType":"module"}