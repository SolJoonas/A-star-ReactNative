{"ast":null,"code":"var _jsxFileName = \"c:\\\\reactnativeapps\\\\AI\\\\App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { DrawerLayoutAndroidComponent } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nvar blocks = [];\nvar newMap = [];\nvar calcmap = [];\nexport default function App() {\n  var _this = this;\n\n  Mapinit();\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, \"LOL t\\xE4\\xE4 toimii\"), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }), React.createElement(FlatList, {\n    data: newMap,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        style: drawmap(item),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 33\n        }\n      }, React.createElement(Text, {\n        style: styles.GridViewInsideTextItemStyle,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }\n      }));\n    },\n    numColumns: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Mapinit() {\n  var mapSize = 25;\n  var blockobjectcount = 5;\n\n  for (var index = 0; index < blockobjectcount; index++) {\n    blocks.push(Math.floor(Math.random() * mapSize) + 1);\n  }\n\n  for (var _index = 0; _index < mapSize; _index++) {\n    if (blocks.includes(_index + 1)) {\n      newMap.push({\n        numv: _index + 1,\n        func: 'block'\n      });\n    } else {\n      newMap.push({\n        numv: _index + 1,\n        func: 'free'\n      });\n    }\n  }\n\n  for (var _index2 = 0; _index2 < mapSize / 5; _index2++) {\n    newMap.push(listwithzeros(mapSize / 5));\n  }\n}\n\nfunction listwithzeros(size) {\n  var element = [];\n\n  for (var index = 0; index < size; index++) {\n    element.push(0);\n  }\n\n  return element;\n}\n\nfunction drawmap(item) {\n  var blockstyle;\n\n  if (item.func == 'block') {\n    blockstyle = styles.mapblock;\n  } else {\n    blockstyle = styles.mapfree;\n  }\n\n  return blockstyle;\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  mapfree: {\n    justifyContent: 'center',\n    flex: 1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'white'\n  },\n  mapblock: {\n    justifyContent: 'center',\n    flex: 1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'red'\n  },\n  mapblock: {\n    justifyContent: 'center',\n    flex: 1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'blue'\n  },\n  GridViewInsideTextItemStyle: {\n    color: '#fff',\n    fontSize: 18,\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["c:/reactnativeapps/AI/App.js"],"names":["StatusBar","React","DrawerLayoutAndroidComponent","blocks","newMap","calcmap","App","Mapinit","styles","container","item","drawmap","GridViewInsideTextItemStyle","mapSize","blockobjectcount","index","push","Math","floor","random","includes","numv","func","listwithzeros","size","element","blockstyle","mapblock","mapfree","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","height","width","borderWidth","borderColor","color","fontSize"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { DrawerLayoutAndroidComponent, StyleSheet, Text, View, FlatList } from 'react-native';\n\n  const blocks=[];\n  const newMap=[];\n  const calcmap=[];\n\n\nexport default function App() {\n\n  Mapinit();\n\n  return (\n    <View style={styles.container}>\n      <Text>LOL tää toimii</Text>\n      <StatusBar style=\"auto\" />\n      <FlatList\n        data={newMap}\n        renderItem={({item}) => <View style={drawmap(item)}>\n          <Text style={styles.GridViewInsideTextItemStyle}></Text>            \n        </View>}\n        numColumns={5}\n      />\n    </View>\n  );\n}\n\nfunction Mapinit(){\n  var mapSize = 25;\n  var blockobjectcount = 5;\n\n  for (let index = 0; index < blockobjectcount; index++) {\n    blocks.push(Math.floor(Math.random() * mapSize) + 1 );    \n  }\n  \n  for (let index = 0; index < mapSize; index++) {\n    if(blocks.includes(index+1)){\n      newMap.push({numv:index+1, func:'block'})\n    }\n    else{\n      newMap.push({numv:index+1, func:'free'})\n    }\n  }\n\n  for (let index = 0; index < mapSize/5; index++) {\n      newMap.push(listwithzeros(mapSize/5))\n  }\n\n}\n\nfunction listwithzeros(size){\n  const element = [];\n  for (let index = 0; index < size; index++) {\n    element.push(0);\n  }\n\n  return(element);\n}\n\nfunction drawmap(item){\n   var blockstyle;\n\n  if (item.func == 'block'){\n    blockstyle = styles.mapblock;\n  }\n  \n  else{\n    blockstyle = styles.mapfree;\n  }\n\n\n  return(blockstyle);\n}\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  mapfree: {\n    justifyContent: 'center',\n    flex:1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'white'\n  },\n\n  mapblock: {\n    justifyContent: 'center',\n    flex:1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'red'\n  },\n\n  mapblock: {\n    justifyContent: 'center',\n    flex:1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'blue'\n  },\n \n  GridViewInsideTextItemStyle: {\n \n   color: '#fff',\n   fontSize: 18,\n   justifyContent: 'center',\n   \n },\n});\n"]},"metadata":{},"sourceType":"module"}