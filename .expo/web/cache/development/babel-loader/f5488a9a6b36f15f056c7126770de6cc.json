{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"c:\\\\reactnativeapps\\\\AI\\\\App.js\";\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport { DrawerLayoutAndroidComponent } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nvar blocks = [];\nvar newMap = [];\nvar moveValues = [];\nvar xSize = 5;\nvar ySize = 5;\nvar mapSize = xSize * ySize;\nvar dir = [];\n\nmoveCounter = function moveCounter(num) {\n  _this.state = {\n    movecount: num\n  };\n};\n\nexport default function App() {\n  var _this2 = this;\n\n  var testmove = function testmove() {\n    var loc = 1;\n    newMap[loc] = {\n      numv: loc,\n      func: 'worm'\n    };\n    moveCounter(1);\n  };\n\n  Mapinit();\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"LOL t\\xE4\\xE4 toimii\"), React.createElement(Button, {\n    onClick: testmove,\n    style: styles.startbutton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, \"Start\"), React.createElement(FlatList, {\n    data: newMap,\n    extraData: this.state,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        style: drawmap(item),\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 33\n        }\n      }, React.createElement(Text, {\n        style: styles.GridViewInsideTextItemStyle,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }\n      }, item.numv));\n    },\n    numColumns: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction DistanceToEnd(loc) {\n  var distance;\n\n  switch (loc) {\n    case loc < 6:\n      distance = loc - 5 + 4;\n      break;\n\n    case loc < 11:\n      distance = loc - 10 + 3;\n      break;\n\n    case loc < 16:\n      distance = loc - 15 + 2;\n      break;\n\n    case loc < 21:\n      distance = loc - 20 + 1;\n      break;\n\n    case loc < 26:\n      distance = loc - 25 + 0;\n      break;\n  }\n\n  return distance;\n}\n\nfunction bestmove(loc) {\n  moves(loc);\n\n  for (var index = 0; index < dir.length; index++) {\n    var value = 25 - DistanceToEnd(dir[index]);\n\n    if (blocks.includes(dir[index])) {\n      value = 0;\n    } else if (index == 0 && loc < xSize) {\n      value = 0;\n    } else if (index == 3 && loc % ySize == 0) {\n      value = 0;\n    } else if (index == 2 && loc % ySize == 1) {\n      value = 0;\n    } else if (index == 0 && loc > mapSize - xSize) {\n      value = 0;\n    }\n\n    moveValues.push(value);\n  }\n}\n\nfunction direction(index) {\n  var basicdir = ['up', 'down', 'left', 'right'];\n  return basicdir[index];\n}\n\nfunction moves(loc) {\n  var down = loc + xSize;\n  var up = loc - xSize;\n  var left = loc - 1;\n  var right = loc + 1;\n  dir.unshift(up, down, left, right);\n}\n\nfunction Mapinit() {\n  var blockobjectcount = 5;\n\n  for (var index = 0; index < blockobjectcount; index++) {\n    var randomnum = Math.floor(Math.random() * mapSize) + 1;\n\n    if (randomnum == 1) {\n      randomnum = randomnum + 1;\n    } else if (randomnum == mapSize) {\n      randomnum = randomnum - 1;\n    }\n\n    blocks.push(randomnum);\n  }\n\n  for (var _index = 0; _index < mapSize; _index++) {\n    var blocknum = _index + 1;\n\n    if (blocks.includes(blocknum)) {\n      newMap.push({\n        numv: _index + 1,\n        func: 'block'\n      });\n    } else {\n      newMap.push({\n        numv: _index + 1,\n        func: 'free'\n      });\n    }\n  }\n}\n\nfunction drawmap(item) {\n  var blockstyle;\n\n  if (item.func == 'block') {\n    blockstyle = styles.mapblock;\n  } else if (item.func == 'worm') {\n    blockstyle = styles.mapworm;\n  } else {\n    blockstyle = styles.mapfree;\n  }\n\n  return blockstyle;\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  mapfree: {\n    justifyContent: 'center',\n    flex: 1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'white'\n  },\n  mapblock: {\n    justifyContent: 'center',\n    flex: 1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'red'\n  },\n  mapworm: {\n    justifyContent: 'center',\n    flex: 1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'blue'\n  },\n  startbutton: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 50,\n    width: 100,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'blue'\n  },\n  GridViewInsideTextItemStyle: {\n    color: '#fff',\n    fontSize: 18,\n    color: \"black\",\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["c:/reactnativeapps/AI/App.js"],"names":["StatusBar","React","useState","useEffect","DrawerLayoutAndroidComponent","blocks","newMap","moveValues","xSize","ySize","mapSize","dir","moveCounter","num","state","movecount","App","testmove","loc","numv","func","Mapinit","styles","container","startbutton","item","drawmap","GridViewInsideTextItemStyle","DistanceToEnd","distance","bestmove","moves","index","length","value","includes","push","direction","basicdir","down","up","left","right","unshift","blockobjectcount","randomnum","Math","floor","random","blocknum","blockstyle","mapblock","mapworm","mapfree","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","height","width","borderWidth","borderColor","color","fontSize"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\n\nimport React ,{ useState, useEffect }from 'react';\n\nimport { DrawerLayoutAndroidComponent, StyleSheet, Text, View, FlatList, Button } from 'react-native';\n\n  const blocks=[];\n  const newMap=[];\n  const moveValues=[];\n\n  var xSize = 5;\n  var ySize = 5;\n  var mapSize = xSize*ySize;\n  const dir = [];\n\n  moveCounter=(num)=>{\n    this.state={\n      movecount: num\n    }\n  };\n\n  export default function App() {\n\n  const testmove = ()=>{\n    var loc = 1;\n    newMap[loc] = {numv:loc, func:'worm'}\n    moveCounter(1);\n  }\n  \n  Mapinit();\n\n  return (\n    <View style={styles.container}>\n      <Text>LOL tää toimii</Text>\n      <Button onClick={testmove} style={styles.startbutton}>Start</Button>\n      <FlatList\n        data={newMap}\n        extraData={this.state}\n        renderItem={({item}) => <View style={drawmap(item)}>\n          <Text style={styles.GridViewInsideTextItemStyle}>{item.numv}</Text>            \n        </View>}\n        numColumns={5}\n      />\n    </View>\n  );\n}\n\n\nfunction DistanceToEnd(loc){\n  var distance;\n  switch (loc) {\n    case loc<6:\n      distance = (loc - 5)+4;\n      break;\n    case loc<11:\n      distance = (loc - 10)+3;\n      break;\n    case loc<16:\n      distance = (loc - 15)+2;\n      break;\n    case loc<21:\n      distance = (loc - 20)+1;\n      break;\n    case loc<26:\n      distance = (loc - 25)+0;\n      break;\n  }\n\n  return(\n    distance\n  )\n}\n\nfunction bestmove(loc){\n  moves(loc)\n\n  for (let index = 0; index < dir.length; index++) {\n    var value = 25 - DistanceToEnd(dir[index]);\n    if (blocks.includes(dir[index])){\n      value = 0;\n    }\n    else if (index == 0 && loc < xSize){\n      value = 0; \n    }\n    else if (index == 3 && loc%ySize == 0){\n      value = 0; \n    }\n    else if (index == 2 && loc%ySize == 1){\n      value = 0; \n    }\n    else if (index == 0 && loc > mapSize-xSize){\n      value = 0;    \n    }\n    moveValues.push(value);\n  }\n}\n\nfunction direction(index){\n  const basicdir = ['up','down','left','right'];\n  return(\n    basicdir[index]\n  )\n}\n\nfunction moves(loc){\n  var down = loc + xSize;\n  var up = loc - xSize;\n  var left = loc - 1;\n  var right = loc + 1;\n  dir.unshift(up,down,left,right);\n}\n\nfunction Mapinit(){\n  var blockobjectcount = 5;\n\n  for (let index = 0; index < blockobjectcount; index++) {\n    var randomnum = Math.floor(Math.random() * mapSize) + 1\n    if (randomnum == 1){\n      randomnum = randomnum + 1;\n    }\n    else if (randomnum == mapSize){\n      randomnum = randomnum - 1;\n    }\n    blocks.push(randomnum);   \n  }\n  \n  for (let index = 0; index < mapSize; index++) {\n    var blocknum = index+1;\n    if(blocks.includes(blocknum)){\n      newMap.push({numv:index+1, func:'block'})\n    }\n    else{\n      newMap.push({numv:index+1, func:'free'})\n    }\n  }\n}\n\n\nfunction drawmap(item){\n   var blockstyle;\n\n  if (item.func == 'block'){\n    blockstyle = styles.mapblock;\n  }\n  else if (item.func == 'worm'){\n    blockstyle = styles.mapworm;\n  }\n  else{\n    blockstyle = styles.mapfree;\n  }\n  return(blockstyle);\n}\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  mapfree: {\n    justifyContent: 'center',\n    flex:1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'white'\n  },\n\n  mapblock: {\n    justifyContent: 'center',\n    flex:1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'red'\n  },\n\n  mapworm: {\n    justifyContent: 'center',\n    flex:1,\n    alignItems: 'center',\n    height: 50,\n    width: 50,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'blue'\n  },\n\n  startbutton: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 50,\n    width: 100,\n    borderWidth: 2,\n    borderColor: 'red',\n    backgroundColor: 'blue'\n  },\n \n  GridViewInsideTextItemStyle: {\n \n   color: '#fff',\n   fontSize: 18,\n   color: \"black\",\n   justifyContent: 'center',\n   \n },\n});\n"]},"metadata":{},"sourceType":"module"}