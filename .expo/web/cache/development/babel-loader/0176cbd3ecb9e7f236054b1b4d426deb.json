{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\reactnativeapps\\\\AI\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport Component from 'react';\nimport { DrawerLayoutAndroidComponent } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport styles from \"./styles/Gridstyles\";\nvar blocks = [];\nvar tileValues = [];\nvar moveValues = [];\nvar map = [];\nvar beenThere = [];\nvar futureValues = [];\nvar xSize = 5;\nvar ySize = 5;\nvar mapSize = xSize * ySize;\nvar dir = [];\nvar loc = 0;\n\nvar app = function (_React$Component) {\n  _inherits(app, _React$Component);\n\n  var _super = _createSuper(app);\n\n  function app(props) {\n    var _this;\n\n    _classCallCheck(this, app);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      movecount: 1\n    };\n    _this.handleUpdate = _this.handleUpdate.bind(_assertThisInitialized(_this));\n    Mapinit();\n    return _this;\n  }\n\n  _createClass(app, [{\n    key: \"handleUpdate\",\n    value: function handleUpdate() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 5\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 7\n        }\n      }, this.state.movecount), React.createElement(Button, {\n        title: \"start\",\n        onPress: this.handleUpdate,\n        style: styles.startbutton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 7\n        }\n      }), React.createElement(FlatList, {\n        data: map,\n        extraData: this.state,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(View, {\n            style: drawmap(item),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 33\n            }\n          }, React.createElement(Text, {\n            style: styles.GridViewInsideTextItemStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 11\n            }\n          }, item.numv));\n        },\n        numColumns: 5,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return app;\n}(React.Component);\n\nexport { app as default };\n\nfunction cell(x, y, random) {\n  this.x = x;\n  this.y = y;\n\n  this.wall = function () {\n    if (random > 0.6) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n}\n\nfunction Mapinit() {\n  for (var y = 0; y < xSize; y++) {\n    for (var x = 0; x < xSize.length; x++) {\n      var randomnum = Math.random();\n      map[y][x] = cell(x, y, randomnum);\n      console.log(randomnum);\n    }\n  }\n}\n\nfunction drawmap(item) {\n  var blockstyle;\n\n  if (!item.wall) {\n    blockstyle = styles.mapfree;\n  } else {\n    blockstyle = styles.mapblock;\n  }\n\n  return blockstyle;\n}","map":{"version":3,"sources":["C:/reactnativeapps/AI/App.js"],"names":["StatusBar","React","useState","useEffect","Component","DrawerLayoutAndroidComponent","styles","blocks","tileValues","moveValues","map","beenThere","futureValues","xSize","ySize","mapSize","dir","loc","app","props","state","movecount","handleUpdate","bind","Mapinit","container","startbutton","item","drawmap","GridViewInsideTextItemStyle","numv","cell","x","y","random","wall","length","randomnum","Math","console","log","blockstyle","mapfree","mapblock"],"mappings":";;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AAEA,OAAOC,SAAP,MAAsB,OAAtB;SAESC,4B;;;;;;AAET,OAAOC,MAAP;AAEE,IAAMC,MAAM,GAAC,EAAb;AACA,IAAMC,UAAU,GAAC,EAAjB;AACA,IAAMC,UAAU,GAAC,EAAjB;AACA,IAAMC,GAAG,GAAC,EAAV;AACA,IAAMC,SAAS,GAAC,EAAhB;AACA,IAAMC,YAAY,GAAC,EAAnB;AAEA,IAAIC,KAAK,GAAG,CAAZ;AACA,IAAIC,KAAK,GAAG,CAAZ;AACA,IAAIC,OAAO,GAAGF,KAAK,GAACC,KAApB;AACA,IAAME,GAAG,GAAG,EAAZ;AACA,IAAIC,GAAG,GAAG,CAAV;;IAGqBC,G;;;;;AAEnB,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAW;AAACC,MAAAA,SAAS,EAAC;AAAX,KAAX;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB;AACAC,IAAAA,OAAO;AAJU;AAKlB;;;;mCAEc,CAEd;;;6BAEK;AAAA;;AACN,aACA,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAElB,MAAM,CAACmB,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAO,KAAKL,KAAL,CAAWC,SAAlB,CADF,EAEE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,OAAd;AAAsB,QAAA,OAAO,EAAE,KAAKC,YAApC;AAAkD,QAAA,KAAK,EAAEhB,MAAM,CAACoB,WAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE,oBAAC,QAAD;AACE,QAAA,IAAI,EAAEhB,GADR;AAEE,QAAA,SAAS,EAAE,KAAKU,KAFlB;AAGE,QAAA,UAAU,EAAE;AAAA,cAAEO,IAAF,QAAEA,IAAF;AAAA,iBAAY,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEC,OAAO,CAACD,IAAD,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACtB,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAErB,MAAM,CAACuB,2BAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAkDF,IAAI,CAACG,IAAvD,CADsB,CAAZ;AAAA,SAHd;AAME,QAAA,UAAU,EAAE,CANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADA;AAcD;;;;EA5BgC7B,KAAK,CAACG,S;;SAAlBc,G;;AAgCvB,SAASa,IAAT,CAAcC,CAAd,EAAgBC,CAAhB,EAAkBC,MAAlB,EAAyB;AACvB,OAAKF,CAAL,GAASA,CAAT;AACA,OAAKC,CAAL,GAASA,CAAT;;AACA,OAAKE,IAAL,GAAY,YAAU;AAEpB,QAAGD,MAAM,GAAC,GAAV,EAAc;AACZ,aAAO,IAAP;AACD,KAFD,MAGI;AACF,aAAO,KAAP;AACD;AACF,GARD;AASD;;AAED,SAASV,OAAT,GAAkB;AAChB,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,KAApB,EAA2BoB,CAAC,EAA5B,EAAgC;AAC9B,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,KAAK,CAACuB,MAA1B,EAAkCJ,CAAC,EAAnC,EAAuC;AACrC,UAAIK,SAAS,GAAGC,IAAI,CAACJ,MAAL,EAAhB;AACAxB,MAAAA,GAAG,CAACuB,CAAD,CAAH,CAAOD,CAAP,IAAYD,IAAI,CAACC,CAAD,EAAGC,CAAH,EAAKI,SAAL,CAAhB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACA;AACH;AACF;;AAGD,SAAST,OAAT,CAAiBD,IAAjB,EAAsB;AACpB,MAAIc,UAAJ;;AAEA,MAAI,CAACd,IAAI,CAACQ,IAAV,EAAe;AACbM,IAAAA,UAAU,GAAGnC,MAAM,CAACoC,OAApB;AACD,GAFD,MAGI;AACFD,IAAAA,UAAU,GAAGnC,MAAM,CAACqC,QAApB;AACD;;AACD,SAAOF,UAAP;AACD","sourcesContent":["import { StatusBar } from 'expo-status-bar';\n\nimport React ,{ useState, useEffect }from 'react';\n\nimport Component from 'react';\n\nimport { DrawerLayoutAndroidComponent, StyleSheet, Text, View, FlatList, Button } from 'react-native';\n\nimport styles from './styles/Gridstyles';\n\n  const blocks=[];\n  const tileValues=[];\n  const moveValues=[];\n  const map=[];\n  const beenThere=[];\n  const futureValues=[];\n\n  var xSize = 5;\n  var ySize = 5;\n  var mapSize = xSize*ySize;\n  const dir = [];\n  var loc = 0;\n  \n\n  export default class app extends React.Component{\n\n    constructor(props) {\n      super(props);\n      this.state={movecount:1};\n      this.handleUpdate = this.handleUpdate.bind(this);\n      Mapinit();    \n    }\n\n    handleUpdate() {\n      \n    }\n    \n  render(){\n    return(\n    <View style={styles.container}>\n      <Text>{this.state.movecount}</Text>\n      <Button title=\"start\" onPress={this.handleUpdate} style={styles.startbutton}></Button>\n      <FlatList\n        data={map}\n        extraData={this.state}\n        renderItem={({item}) => <View style={drawmap(item)}>\n          <Text style={styles.GridViewInsideTextItemStyle}>{item.numv}</Text>            \n        </View>}\n        numColumns={5}\n      />\n    </View>\n    );\n  }\n \n}\n\nfunction cell(x,y,random){\n  this.x = x;\n  this.y = y;\n  this.wall = function(){\n\n    if(random>0.6){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n}\n\nfunction Mapinit(){\n  for (let y = 0; y < xSize; y++) {\n    for (let x = 0; x < xSize.length; x++) {\n      var randomnum = Math.random();\n      map[y][x] = cell(x,y,randomnum);\n      console.log(randomnum);\n     }\n  }\n}\n\n\nfunction drawmap(item){\n  var blockstyle;\n   \n  if (!item.wall){\n    blockstyle = styles.mapfree;\n  }\n  else{\n    blockstyle = styles.mapblock;\n  }\n  return(blockstyle);\n}"]},"metadata":{},"sourceType":"module"}