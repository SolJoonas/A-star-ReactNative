{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\reactnativeapps\\\\AI\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport Component from 'react';\nimport { DrawerLayoutAndroidComponent } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport styles from \"./styles/Gridstyles\";\nvar blocks = [];\nvar tileValues = [];\nvar moveValues = [];\nvar map = [];\nvar beenThere = [];\nvar futureValues = [];\nvar xSize = 5;\nvar ySize = 5;\nvar mapSize = xSize * ySize;\nvar dir = [];\nvar loc = 0;\n\nvar app = function (_React$Component) {\n  _inherits(app, _React$Component);\n\n  var _super = _createSuper(app);\n\n  function app(props) {\n    var _this;\n\n    _classCallCheck(this, app);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      movecount: 1\n    };\n    _this.handleUpdate = _this.handleUpdate.bind(_assertThisInitialized(_this));\n    Mapinit();\n    return _this;\n  }\n\n  _createClass(app, [{\n    key: \"handleUpdate\",\n    value: function handleUpdate() {\n      var pressed = true;\n\n      do {\n        map[loc] = {\n          numv: loc + 1,\n          func: 'worm'\n        };\n        beenThere.push(loc);\n        bestmove(loc);\n        LegitMove(loc);\n        var movedir = Math.max.apply(null, moveValues);\n        var dirIndex = moveValues.indexOf(movedir);\n        console.log(moveValues);\n        console.log(loc);\n        console.log(movedir);\n\n        switch (dirIndex) {\n          case 0:\n            loc = loc - 5;\n            break;\n\n          case 1:\n            loc = loc + 5;\n            break;\n\n          case 2:\n            loc = loc - 1;\n            break;\n\n          case 3:\n            loc = loc + 1;\n            break;\n        }\n\n        pressed = false;\n        this.setState({\n          movecount: this.state.movecount + 1\n        });\n      } while (pressed == true);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 5\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }\n      }, this.state.movecount), React.createElement(Button, {\n        title: \"start\",\n        onPress: this.handleUpdate,\n        style: styles.startbutton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 7\n        }\n      }), React.createElement(FlatList, {\n        data: map,\n        extraData: this.state,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(View, {\n            style: drawmap(item),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 33\n            }\n          }, React.createElement(Text, {\n            style: styles.GridViewInsideTextItemStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 11\n            }\n          }, item.numv));\n        },\n        numColumns: 5,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return app;\n}(React.Component);\n\nexport { app as default };\n\nfunction cell(x, y, random) {\n  this.x = x;\n  this.y = y;\n\n  this.wall = function () {\n    if (random > 0.6) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n}\n\nfunction Mapinit() {\n  var randomnum = Math.random();\n  console.log('this is random number' + randomnum);\n\n  for (var y = 0; y < xSize; y++) {\n    for (var x = 0; x < xSize.length; x++) {\n      map[y][x] = cell(x, y, randomnum);\n    }\n  }\n}\n\nfunction drawmap(item) {\n  var blockstyle;\n\n  if (!item.wall) {\n    blockstyle = styles.mapfree;\n  } else {\n    blockstyle = styles.mapblock;\n  }\n\n  return blockstyle;\n}","map":{"version":3,"sources":["C:/reactnativeapps/AI/App.js"],"names":["StatusBar","React","useState","useEffect","Component","DrawerLayoutAndroidComponent","styles","blocks","tileValues","moveValues","map","beenThere","futureValues","xSize","ySize","mapSize","dir","loc","app","props","state","movecount","handleUpdate","bind","Mapinit","pressed","numv","func","push","bestmove","LegitMove","movedir","Math","max","apply","dirIndex","indexOf","console","log","setState","container","startbutton","item","drawmap","GridViewInsideTextItemStyle","cell","x","y","random","wall","randomnum","length","blockstyle","mapfree","mapblock"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\n\nimport React ,{ useState, useEffect }from 'react';\n\nimport Component from 'react';\n\nimport { DrawerLayoutAndroidComponent, StyleSheet, Text, View, FlatList, Button } from 'react-native';\n\nimport styles from './styles/Gridstyles';\n\n  const blocks=[];\n  const tileValues=[];\n  const moveValues=[];\n  const map=[];\n  const beenThere=[];\n  const futureValues=[];\n\n  var xSize = 5;\n  var ySize = 5;\n  var mapSize = xSize*ySize;\n  const dir = [];\n  var loc = 0;\n  \n\n  export default class app extends React.Component{\n\n    constructor(props) {\n      super(props);\n      this.state={movecount:1};\n      this.handleUpdate = this.handleUpdate.bind(this);\n      Mapinit();    \n    }\n\n    handleUpdate() {\n      var pressed = true;\n      do{\n\n        map[loc] = {numv:loc + 1, func:'worm'};\n        beenThere.push(loc);\n        \n        bestmove(loc)\n        LegitMove(loc);\n        var movedir = Math.max.apply(null, moveValues);\n        var dirIndex = moveValues.indexOf(movedir);\n\n        console.log(moveValues);\n        console.log(loc);\n        console.log(movedir);\n\n        switch (dirIndex) {\n          case 0:\n            loc = loc - 5;\n            break;\n          case 1:\n            loc = loc + 5;\n            break;\n          case 2:\n            loc = loc - 1;\n            break;\n          case 3:\n            loc = loc + 1;\n            break;\n        }\n\n        pressed = false;\n        this.setState({movecount: this.state.movecount + 1});\n    }while(pressed == true);\n  }\n    \n  render(){\n    return(\n    <View style={styles.container}>\n      <Text>{this.state.movecount}</Text>\n      <Button title=\"start\" onPress={this.handleUpdate} style={styles.startbutton}></Button>\n      <FlatList\n        data={map}\n        extraData={this.state}\n        renderItem={({item}) => <View style={drawmap(item)}>\n          <Text style={styles.GridViewInsideTextItemStyle}>{item.numv}</Text>            \n        </View>}\n        numColumns={5}\n      />\n    </View>\n    );\n  }\n \n}\n\nfunction cell(x,y,random){\n  this.x = x;\n  this.y = y;\n  this.wall = function(){\n\n    if(random>0.6){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n}\n\nfunction Mapinit(){\n\n  var randomnum = Math.random();\n\n  console.log('this is random number' + randomnum);\n\n  for (let y = 0; y < xSize; y++) {\n    for (let x = 0; x < xSize.length; x++) {\n      map[y][x] = cell(x,y,randomnum)\n     }\n  }\n}\n\n\nfunction drawmap(item){\n  var blockstyle;\n   \n  if (!item.wall){\n    blockstyle = styles.mapfree;\n  }\n  else{\n    blockstyle = styles.mapblock;\n  }\n  return(blockstyle);\n}"]},"metadata":{},"sourceType":"module"}