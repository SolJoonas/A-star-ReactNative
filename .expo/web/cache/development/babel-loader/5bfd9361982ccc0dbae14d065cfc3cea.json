{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\reactnativeapps\\\\AI\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport Component from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport styles from \"./styles/Gridstyles\";\nvar map = [];\nvar OpenSet = [];\nvar ClosedSet = [];\nvar xSize = 5;\nvar ySize = 5;\nvar mapSize = xSize * ySize;\nvar startStop = [];\nvar start = 0;\nvar end = 0;\nvar startID;\nvar endID;\nvar last;\nvar UltimateCurrent = [];\nvar goal = false;\nvar testi;\n\nvar app = function (_React$Component) {\n  _inherits(app, _React$Component);\n\n  var _super = _createSuper(app);\n\n  function app(props) {\n    var _this;\n\n    _classCallCheck(this, app);\n\n    _this = _super.call(this, props);\n\n    _this.handleUpdate = function () {\n      aStar(map[startID]);\n      trail();\n      console.log(map);\n\n      _this.setState({\n        clickcount: _this.state.clickcount + 1\n      });\n    };\n\n    _this.updateMap = function () {\n      end = null;\n      endID = null;\n      start = null;\n      startID = null;\n      map.splice(0, map.length);\n      startStop.splice(0, startStop.length);\n      Mapinit();\n\n      _this.setState({\n        clickcount: _this.state.clickcount + 1\n      });\n\n      console.log(map);\n    };\n\n    _this.navigate = function (id) {\n      if (startStop.length < 2) {\n        startStop.push(map[id]);\n        console.log(startStop);\n      } else {\n        console.log('On jo kaksi');\n      }\n\n      if (startStop.length > 1) {\n        end = startStop[1].Location;\n        endID = startStop[1].ID;\n      } else {\n        start = startStop[0].Location;\n        startID = startStop[0].ID;\n      }\n\n      _this.setState({\n        clickcount: _this.state.clickcount + 1\n      });\n    };\n\n    _this.state = {\n      clickcount: 0\n    };\n    _this.handleUpdate = _this.handleUpdate.bind(_assertThisInitialized(_this));\n    _this.navigate = _this.navigate.bind(_assertThisInitialized(_this));\n    _this.updateMap = _this.updateMap.bind(_assertThisInitialized(_this));\n    Mapinit();\n    return _this;\n  }\n\n  _createClass(app, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 5\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 7\n        }\n      }, \"Etsin parhaan reitin sinulle\"), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }\n      }, \"Kun olet valinnut Aloitus ja lopetus pisteen klikkaamalla ruutuja paina navigate\"), React.createElement(Text, {\n        style: styles.startText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 7\n        }\n      }, \"T\\xE4m\\xE4 on aloitus pisteen v\\xE4ri\"), React.createElement(Text, {\n        style: styles.endText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }\n      }, \"T\\xE4m\\xE4 on lopetus pisteen v\\xE4ri\"), React.createElement(Text, {\n        style: styles.wallText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 7\n        }\n      }, \"T\\xE4m\\xE4n v\\xE4riset ovat esteit\\xE4\"), React.createElement(Button, {\n        title: \"Navigate\",\n        onPress: this.handleUpdate,\n        style: styles.startbutton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }\n      }), React.createElement(Button, {\n        title: \"New map\",\n        onPress: this.updateMap,\n        style: styles.startbutton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 7\n        }\n      }), React.createElement(FlatList, {\n        data: map,\n        extraData: this.state.clickcount,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(View, {\n            style: drawmap(item),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 33\n            }\n          }, React.createElement(TouchableOpacity, {\n            style: styles.button,\n            onPress: function onPress() {\n              _this2.navigate(item.ID);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 11\n            }\n          }, React.createElement(Text, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 13\n            }\n          }, item.ID)));\n        },\n        numColumns: xSize,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return app;\n}(React.Component);\n\nexport { app as default };\n\nfunction aStar(current) {\n  var CurrentID = current.ID;\n  OpenSet.push(CurrentID);\n\n  do {\n    var minscore = mapSize;\n\n    for (var index = 0; index < OpenSet.length; index++) {\n      map[OpenSet[index]].score = Distance(map[OpenSet[index]].Location);\n\n      if (map[OpenSet[index]].score < minscore) {\n        minscore = map[OpenSet[index]].fscore;\n      }\n    }\n\n    for (var _index = 0; _index < OpenSet.length; _index++) {\n      if (map[OpenSet[_index]].score > minscore) {\n        ClosedSet.push(OpenSet[_index]);\n        removeFromOpenList(OpenSet[_index]);\n      }\n    }\n\n    var possibilities = OpenSet.length;\n\n    for (var _index2 = 0; _index2 < possibilities; _index2++) {\n      CurrentID = OpenSet[_index2];\n      map[CurrentID].Neighbours = Neighbours(map[CurrentID].x, map[CurrentID].y, map[CurrentID].ID);\n\n      for (var _index3 = 0; _index3 < map[CurrentID].Neighbours.length; _index3++) {\n        var NeighbourID = map[CurrentID].Neighbours[_index3].ID;\n\n        if (InOpenSet(NeighbourID) == false && InClosedSet(NeighbourID) == false) {\n          map[NeighbourID].score = Distance(map[NeighbourID].Location);\n          map[NeighbourID].cameFrom = CurrentID;\n          OpenSet.push(NeighbourID);\n        }\n      }\n    }\n\n    ClosedSet.push(CurrentID);\n    removeFromOpenList(CurrentID);\n  } while (CurrentID != endID);\n}\n\nfunction removeFromOpenList(removeID) {\n  for (var index = 0; index < OpenSet.length; index++) {\n    if (OpenSet[index] == removeID) {\n      OpenSet.splice(index, 1);\n    }\n  }\n}\n\nfunction InClosedSet(id) {\n  var is = false;\n\n  for (var index = 0; index < ClosedSet.length; index++) {\n    if (id == ClosedSet[index]) {\n      is = true;\n    }\n  }\n\n  return is;\n}\n\nfunction InOpenSet(id) {\n  var is = false;\n\n  for (var index = 0; index < OpenSet.length; index++) {\n    if (id == OpenSet[index]) {\n      is = true;\n    }\n  }\n\n  return is;\n}\n\nfunction trail() {\n  var endPoint = map[endID];\n  var past = true;\n  var trailPath;\n  var last = endPoint;\n  map[startID].trail = true;\n\n  do {\n    trailPath = map[last.ID];\n    map[trailPath.ID].trail = true;\n    last = map[trailPath.cameFrom];\n\n    if (trailPath.ID == startID) {\n      past = false;\n    }\n  } while (past != false);\n}\n\nfunction cell(nx, ny, random, idnum) {\n  var ID = idnum;\n  var cameFrom = 0;\n  var x = nx;\n  var y = ny;\n  var loc = [x, y];\n  var score = 0;\n  var wall = wallorNot(random, loc);\n  var blocks = [];\n  var trail = false;\n  return {\n    'x': x,\n    'y': y,\n    'wall': wall,\n    'Neighbours': blocks,\n    'Location': loc,\n    'score': score,\n    'ID': ID,\n    'cameFrom': cameFrom,\n    'trail': trail\n  };\n}\n\nfunction Neighbours(x, y, id) {\n  var NL = [];\n\n  if (y > 0) {\n    if (map[id - xSize].wall != true) {\n      NL.push(map[id - xSize]);\n    }\n  }\n\n  if (y < ySize - 1) {\n    if (map[id + xSize].wall != true) {\n      NL.push(map[id + xSize]);\n    }\n  }\n\n  if (x > 0) {\n    if (map[id - 1].wall != true) {\n      NL.push(map[id - 1]);\n    }\n  }\n\n  if (x < xSize - 1) {\n    if (map[id + 1].wall != true) {\n      NL.push(map[id + 1]);\n    }\n  }\n\n  for (var _x = 0; _x < OpenSet.length; _x++) {\n    for (var _y = 0; _y < NL.length; _y++) {\n      if (OpenSet[_x].ID == NL[_y].ID) {\n        NL.splice(_y, 1);\n      }\n    }\n  }\n\n  return NL;\n}\n\nfunction wallorNot(random, loc) {\n  if (JSON.stringify(loc) == JSON.stringify(start) || JSON.stringify(loc) == JSON.stringify(end)) {\n    return false;\n  } else {\n    if (random > 0.8) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nfunction Mapinit() {\n  var num = 0;\n\n  for (var y = 0; y < ySize; y++) {\n    for (var x = 0; x < xSize; x++) {\n      var randomnum = Math.random();\n      map.push(cell(x, y, randomnum, num));\n      num++;\n    }\n  }\n}\n\nfunction drawmap(item) {\n  var blockstyle;\n\n  if (item.trail == true) {\n    blockstyle = styles.Trail;\n  }\n\n  if (!item.wall) {\n    if (item.ID == startID) {\n      blockstyle = styles.start;\n    } else if (item.ID == endID) {\n      blockstyle = styles.end;\n    } else if (item.trail == true) {\n      blockstyle = styles.Trail;\n    } else {\n      blockstyle = styles.mapfree;\n    }\n  } else {\n    blockstyle = styles.mapblock;\n  }\n\n  return blockstyle;\n}\n\nfunction Distance(location) {\n  return Math.abs(location[0] - end[0]) + Math.abs(location[1] - end[1]);\n}","map":{"version":3,"sources":["C:/reactnativeapps/AI/App.js"],"names":["StatusBar","React","useState","useEffect","Component","styles","map","OpenSet","ClosedSet","xSize","ySize","mapSize","startStop","start","end","startID","endID","last","UltimateCurrent","goal","testi","app","props","handleUpdate","aStar","trail","console","log","setState","clickcount","state","updateMap","splice","length","Mapinit","navigate","id","push","Location","ID","bind","container","startText","endText","wallText","startbutton","item","drawmap","button","current","CurrentID","minscore","index","score","Distance","fscore","removeFromOpenList","possibilities","Neighbours","x","y","NeighbourID","InOpenSet","InClosedSet","cameFrom","removeID","is","endPoint","past","trailPath","cell","nx","ny","random","idnum","loc","wall","wallorNot","blocks","NL","JSON","stringify","num","randomnum","Math","blockstyle","Trail","mapfree","mapblock","location","abs"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\n\nimport React ,{ useState, useEffect }from 'react';\n\nimport Component from 'react';\n\nimport {TouchableOpacity, Text, View, FlatList, Button } from 'react-native';\n\nimport styles from './styles/Gridstyles';\n\nconst map=[];\n\nvar OpenSet=[];\nvar ClosedSet=[];\n\n// tässä määritetään kartan koko\nvar xSize = 5;\nvar ySize = 5;\nvar mapSize = xSize*ySize;\n\nvar startStop = [];\n\nvar start = 0;\nvar end = 0;\n\nvar startID;\nvar endID;\n\nvar last;\n\nvar UltimateCurrent = [];\n\nvar goal = false;\n\n\nvar testi;\n\nexport default class app extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state={clickcount:0};\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.navigate = this.navigate.bind(this);\n    this.updateMap = this.updateMap.bind(this);\n    \n    Mapinit(); \n  }\n\n  handleUpdate = () =>{\n    aStar(map[startID]);\n    trail();\n    console.log(map);\n    this.setState({clickcount :this.state.clickcount + 1})    \n  }\n\n  updateMap = () =>{\n    end = null;\n    endID = null;\n    start = null;\n    startID = null;\n    map.splice(0,map.length);\n    startStop.splice(0,startStop.length);\n\n    Mapinit();\n    \n    this.setState({clickcount :this.state.clickcount + 1}) \n    console.log(map);  \n  }\n\n  navigate = (id) =>{\n    if(startStop.length < 2){\n      startStop.push(map[id]);\n      console.log(startStop);\n    }\n    else{\n      console.log('On jo kaksi');\n    }\n\n    if(startStop.length > 1){\n      end = startStop[1].Location;\n      endID = startStop[1].ID;\n    }\n    else{\n      start = startStop[0].Location;\n      startID = startStop[0].ID;\n    }\n\n    this.setState({clickcount :this.state.clickcount + 1})\n  }\n    \n  render(){\n    return(\n    <View style={styles.container}>\n      <Text>Etsin parhaan reitin sinulle</Text>\n      <Text>Kun olet valinnut Aloitus ja lopetus pisteen klikkaamalla ruutuja paina navigate</Text>\n      <Text style={styles.startText}>Tämä on aloitus pisteen väri</Text>\n      <Text style={styles.endText}>Tämä on lopetus pisteen väri</Text>\n      <Text style={styles.wallText}>Tämän väriset ovat esteitä</Text>\n      <Button title=\"Navigate\" onPress={this.handleUpdate} style={styles.startbutton}></Button>\n      <Button title=\"New map\" onPress={this.updateMap} style={styles.startbutton}></Button>\n      <FlatList\n        data={map}\n        extraData={this.state.clickcount}\n        renderItem={({item}) => <View style={drawmap(item)}>\n          <TouchableOpacity style={styles.button} onPress={()=>{this.navigate(item.ID)}}>\n            <Text>{item.ID}</Text>\n          </TouchableOpacity>            \n        </View>}\n        numColumns={xSize}\n      />\n    </View>\n    );\n  } \n}\n\n//tutkii parhaan reitin aloituksesta lopetukseen. \n\nfunction aStar(current){\n  var CurrentID = current.ID;\n\n  OpenSet.push(CurrentID);\n  do{\n    var minscore = mapSize; // etäisyys ei voi olla suurempi kun kartan leveys x korkeus\n\n    for (let index = 0; index < OpenSet.length; index++) {\n      map[OpenSet[index]].score =  Distance(map[OpenSet[index]].Location)\n      if(map[OpenSet[index]].score < minscore){\n        minscore = map[OpenSet[index]].fscore; // mikä on pienin fscore opensetissä\n      }\n    }\n\n    for (let index = 0; index < OpenSet.length; index++) {\n      if(map[OpenSet[index]].score > minscore){ // poistetaan kaikki patsi ne joilla on pienin fscore\n        ClosedSet.push(OpenSet[index]);\n        removeFromOpenList(OpenSet[index]);\n      }\n    }\n\n    var possibilities = OpenSet.length;\n\n    for (let index = 0; index < possibilities; index++) {\n\n      CurrentID = OpenSet[index];\n      map[CurrentID].Neighbours = Neighbours(map[CurrentID].x, map[CurrentID].y, map[CurrentID].ID); // katsotaan naapurit ja  tallennetaan niiden ID listaan objektin sisään\n      \n      for (let index = 0; index < map[CurrentID].Neighbours.length; index++) {\n\n        var NeighbourID = map[CurrentID].Neighbours[index].ID;\n\n        //jos solu ei ole Opensetissä tai Closed setissä eli ei ole kurkittu sitä ennen voidaan se\n        //lisätä Opensettiin. \n        if(InOpenSet(NeighbourID) == false && InClosedSet(NeighbourID) == false){\n          map[NeighbourID].score =  Distance(map[NeighbourID].Location);\n          map[NeighbourID].cameFrom = CurrentID;         \n          OpenSet.push(NeighbourID);\n        }\n      }\n      \n    }\n    ClosedSet.push(CurrentID);\n    removeFromOpenList(CurrentID);\n  }while(CurrentID != endID)//(JSON.stringify(current.Location)!=JSON.stringify(end))\n}\n\nfunction removeFromOpenList(removeID){\n  for (let index = 0; index < OpenSet.length; index++) {\n    if(OpenSet[index] == removeID){\n      OpenSet.splice(index,1);\n    }\n  }\n}\n\n\n// tutkii onko solu Closedsetissä\nfunction InClosedSet(id){\n  var is = false;\n  for (let index = 0; index < ClosedSet.length; index++) {\n    if(id == ClosedSet[index]){\n      is  = true;\n    }\n  }\n  return is;\n}\n\n// tutkii onko solu Opensetissä\nfunction InOpenSet(id){\n  var is = false;\n  for (let index = 0; index < OpenSet.length; index++) {\n    if(id == OpenSet[index]){\n      is  = true;\n    }\n  }\n  return is;\n}\n\n// piirtää reitin. \nfunction trail(){\n\n  var endPoint = map[endID]; //solusta johon reitin haku loppui. Nyt oon koodannu sen vaan maaliksi koska koodi ei tunnista epäonnistumista.\n  var past = true;\n  var trailPath;\n  var last = endPoint; // tässä kohtaa määritän mistä solusta lähetään, tämä muuttuu kun reittiä mennään eteenpäin.\n\n  map[startID].trail = true; // värjää aloituksen reitiksi\n\n  do{\n\n    trailPath = map[last.ID];\n    map[trailPath.ID].trail = true;\n    last = map[trailPath.cameFrom];\n\n    if(trailPath.ID==startID){\n      past = false;\n    }\n\n  }while(past != false)\n}\n\nfunction cell(nx,ny,random,idnum){\n\n  // kartta muodostuu soluista joilla kaikilla omat alla olevat omat tiedot.\n\n  let ID = idnum;\n  let cameFrom = 0;\n  let x = nx;\n  let y = ny;\n  let loc = [x,y];\n  let score = 0;\n  let wall = wallorNot(random, loc);\n  var blocks = [];\n  var trail = false;\n\n  return {'x':x,'y':y,'wall':wall, 'Neighbours':blocks, 'Location':loc , 'score':score,'ID':ID, 'cameFrom':cameFrom,'trail':trail};\n}\n\n\n// tämä voisi olla parempi mutta toimii kuitenkin toistaiseksi.\n\nfunction Neighbours(x, y, id){\n\n  var NL = []; // tahän kootaan lista naapureista\n\n  // alla tutkitaan missä suunnassa on käytettävä naapuri joka voidaan lisätä listaan.\n\n  if(y > 0){ // voiko mennä ylös\n    \n    if (map[id-(xSize)].wall != true){\n      NL.push(map[id-(xSize)]);\n    }\n  }\n  if(y < ySize-1){ // voiko mennä alas\n    \n    if (map[id+(xSize)].wall != true){\n      NL.push(map[id+(xSize)]);\n    }\n  }\n  if(x > 0){ // voiko mennä vasemmalle\n    \n    if (map[id-1].wall != true){\n      NL.push(map[id-1]);\n    }\n  }\n  if(x < xSize-1){ // voiko mennä oikealle\n    \n    if (map[id+1].wall != true){\n      NL.push(map[id+1]);\n    }\n  }\n  \n  for (let x = 0; x < OpenSet.length; x++) {\n    for (let y = 0; y < NL.length; y++) {\n      if (OpenSet[x].ID == NL[y].ID){\n        NL.splice(y,1);\n      }\n      \n    }\n  }\n  \n  return NL;\n}\n\n// tällä funktiolla määritellään satunnaisesti mikä solu on este\nfunction wallorNot(random,loc){\n  if(JSON.stringify(loc)==JSON.stringify(start) || JSON.stringify(loc) == JSON.stringify(end)){\n    return false;\n  }\n  else{\n    if(random>0.8){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n}\n\n\n//luo solut karttaan.\nfunction Mapinit(){\n  var num = 0;\n  for (let y = 0; y < ySize; y++) {\n    for (let x = 0; x < xSize; x++) {\n      var randomnum = Math.random();\n      map.push(cell(x,y,randomnum,num));\n      num++\n     }\n  }\n}\n\n//tällä määritellään kartan värit.\nfunction drawmap(item){\n  var blockstyle;\n  if (item.trail == true){\n    blockstyle = styles.Trail;\n  }\n  if (!item.wall){\n    if (item.ID == startID){\n      blockstyle = styles.start;\n    }\n    else if (item.ID == endID){\n      blockstyle = styles.end;\n    }\n    else if (item.trail == true){\n      blockstyle = styles.Trail;\n    }\n    else{\n    blockstyle = styles.mapfree;\n    }\n  }\n  else{\n    blockstyle = styles.mapblock;\n  }\n  return(blockstyle);\n}\n// lasketaan matka tähän functioon lähetetystä solusta maaliin. \nfunction Distance(location){\n  return Math.abs(location[0]-end[0])+Math.abs(location[1]-end[1]); // toimii vain jos aloitus on vasemmassa yläkulmassa\n}"]},"metadata":{},"sourceType":"module"}