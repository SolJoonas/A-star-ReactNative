{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\reactnativeapps\\\\AI\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport Component from 'react';\nimport { DrawerLayoutAndroidComponent } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport styles from \"./styles/Gridstyles\";\nvar map = [];\nvar OpenSet = [];\nvar ClosedSet = [];\nvar xSize = 5;\nvar ySize = 5;\nvar mapSize = xSize * ySize;\nvar start = [0, 0];\nvar end = [xSize - 1, ySize - 1];\n\nvar app = function (_React$Component) {\n  _inherits(app, _React$Component);\n\n  var _super = _createSuper(app);\n\n  function app(props) {\n    var _this;\n\n    _classCallCheck(this, app);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      movecount: 1\n    };\n    _this.handleUpdate = _this.handleUpdate.bind(_assertThisInitialized(_this));\n    console.log(map);\n    console.log(start);\n    console.log(end);\n    return _this;\n  }\n\n  _createClass(app, [{\n    key: \"handleUpdate\",\n    value: function handleUpdate() {\n      var current = map[0];\n      var goal = false;\n      var gscore = 0;\n\n      while (OpenSet != null && goal != true) {\n        for (var index = 0; index < current.Neighbours.length; index++) {\n          Distance(current.Neighbours[index]);\n        }\n\n        this.state.movecount++;\n\n        if (current == end) {\n          goal = true;\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 5\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 7\n        }\n      }, this.state.movecount), React.createElement(Button, {\n        title: \"start\",\n        onPress: this.handleUpdate(),\n        style: styles.startbutton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }\n      }), React.createElement(FlatList, {\n        data: map,\n        extraData: this.state,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(View, {\n            style: drawmap(item),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 33\n            }\n          }, React.createElement(Text, {\n            style: styles.GridViewInsideTextItemStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 11\n            }\n          }, item.y));\n        },\n        numColumns: xSize,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return app;\n}(React.Component);\n\nexport { app as default };\n\nfunction cell(nx, ny, random) {\n  var x = nx;\n  var y = ny;\n  var loc = [x, y];\n  var fscore = 0;\n  var wall = wallorNot(random, loc);\n  var blocks = Neighbours(x, y);\n  return {\n    'x': x,\n    'y': y,\n    'wall': wall,\n    'Neighbours': blocks,\n    'Location': loc,\n    'fscore': fscore\n  };\n}\n\nfunction Neighbours(x, y) {\n  var NL = [];\n\n  if (x > 0) {\n    NL.push([x - 1, y]);\n  }\n\n  if (x < xSize - 1) {\n    NL.push([x + 1, y]);\n  }\n\n  if (y > 0) {\n    NL.push([x, y - 1]);\n  }\n\n  if (x < ySize - 1) {\n    NL.push([x, y + 1]);\n  }\n\n  return NL;\n}\n\nfunction wallorNot(random, loc) {\n  if (JSON.stringify(loc) == JSON.stringify(start) || JSON.stringify(loc) == JSON.stringify(end)) {\n    return false;\n  } else {\n    if (random > 0.8) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nfunction Mapinit() {\n  for (var y = 0; y < ySize; y++) {\n    for (var x = 0; x < xSize; x++) {\n      var randomnum = Math.random();\n      map.push(cell(x, y, randomnum));\n      console.log(randomnum);\n    }\n  }\n}\n\nfunction drawmap(item) {\n  var blockstyle;\n\n  if (!item.wall) {\n    if (OpenSet.includes(item.loc)) {\n      blockstyle = styles.OpenSet;\n    }\n\n    if (ClosedSet.includes(item.loc)) {\n      blockstyle = styles.ClosedSet;\n    } else {\n      blockstyle = styles.mapfree;\n    }\n  } else {\n    blockstyle = styles.mapblock;\n  }\n\n  return blockstyle;\n}\n\nfunction Distance(location) {\n  return Math.max(Math.abs(location[0] - end[0]), Math.abs(location[0] - end[0]));\n}","map":{"version":3,"sources":["C:/reactnativeapps/AI/App.js"],"names":["StatusBar","React","useState","useEffect","Component","DrawerLayoutAndroidComponent","styles","map","OpenSet","ClosedSet","xSize","ySize","mapSize","start","end","app","props","state","movecount","handleUpdate","bind","console","log","current","goal","gscore","index","Neighbours","length","Distance","container","startbutton","item","drawmap","GridViewInsideTextItemStyle","y","cell","nx","ny","random","x","loc","fscore","wall","wallorNot","blocks","NL","push","JSON","stringify","Mapinit","randomnum","Math","blockstyle","includes","mapfree","mapblock","location","max","abs"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\n\nimport React ,{ useState, useEffect }from 'react';\n\nimport Component from 'react';\n\nimport { DrawerLayoutAndroidComponent, StyleSheet, Text, View, FlatList, Button } from 'react-native';\n\nimport styles from './styles/Gridstyles';\n\n  const map=[];\n\n  var OpenSet=[];\n  var ClosedSet=[];\n\n  var xSize = 5;\n  var ySize = 5;\n  var mapSize = xSize*ySize;\n\n  var start = [0,0];\n  var end = [xSize-1,ySize-1];\n\n  \n\n  export default class app extends React.Component{\n\n    constructor(props) {\n      super(props);\n      this.state={movecount:1};\n      this.handleUpdate = this.handleUpdate.bind(this);\n      //Mapinit();   \n      console.log(map); \n      console.log(start);\n      console.log(end);\n    }\n\n    handleUpdate() {\n\n      var current = map[0];\n      var goal = false;\n\n      var gscore = 0;\n\n      while(OpenSet != null&&goal != true){\n\n        for (let index = 0; index < current.Neighbours.length; index++) {\n          Distance(current.Neighbours[index]);\n        }\n\n        this.state.movecount++\n        if (current == end){\n          goal = true;\n        }\n      }\n    }\n    \n  render(){\n    return(\n    <View style={styles.container}>\n      <Text>{this.state.movecount}</Text>\n      <Button title=\"start\" onPress={this.handleUpdate()} style={styles.startbutton}></Button>\n      <FlatList\n        data={map}\n        extraData={this.state}\n        renderItem={({item}) => <View style={drawmap(item)}>\n          <Text style={styles.GridViewInsideTextItemStyle}>{item.y}</Text>            \n        </View>}\n        numColumns={xSize}\n      />\n    </View>\n    );\n  }\n \n}\n\nfunction cell(nx,ny,random){\n\n  let x = nx;\n  let y = ny;\n  let loc = [x,y];\n  let fscore = 0;\n  let wall = wallorNot(random, loc);\n  var blocks = Neighbours(x,y);\n  \n  // jatka tästä\n  return {'x':x,'y':y,'wall':wall, 'Neighbours':blocks, 'Location':loc , 'fscore':fscore};\n}\n\nfunction Neighbours(x,y){\n\n  var NL = [];\n\n  if(x > 0){ // voiko mennä ylös\n    NL.push([x-1,y]);\n  }\n  if(x < xSize-1){ // voiko mennä alas\n    NL.push([x+1,y]);\n  }\n  if(y > 0){ // voiko mennä vasemmalle\n    NL.push([x,y-1]);\n  }\n  if(x < ySize-1){ // voiko mennä oikealle\n    NL.push([x,y+1]);\n  }\n\n  return NL;\n}\n\nfunction wallorNot(random,loc){\n  if(JSON.stringify(loc)==JSON.stringify(start) || JSON.stringify(loc) == JSON.stringify(end)){\n    return false;\n  }\n  else{\n    if(random>0.8){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n}\n\nfunction Mapinit(){\n  for (let y = 0; y < ySize; y++) {\n    for (let x = 0; x < xSize; x++) {\n      var randomnum = Math.random();\n      map.push(cell(x,y,randomnum));\n      console.log(randomnum);\n     }\n  }\n}\n\nfunction drawmap(item){\n  var blockstyle;\n   \n  if (!item.wall){\n    if (OpenSet.includes(item.loc)){\n      blockstyle = styles.OpenSet;\n    }\n    if (ClosedSet.includes(item.loc)){\n      blockstyle = styles.ClosedSet;\n    }\n    else{\n    blockstyle = styles.mapfree;\n    }\n  }\n  else{\n    blockstyle = styles.mapblock;\n  }\n  return(blockstyle);\n}\n\nfunction Distance(location){\n  return Math.max(Math.abs(location[0]-end[0]),Math.abs(location[0]-end[0])); // toimii vain jos aloitus on vasemmassa yläkulmassa\n}"]},"metadata":{},"sourceType":"module"}